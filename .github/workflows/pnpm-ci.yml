name: PNPM CI

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

permissions: read-all

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './pnpm-plugine2e-datasource'
    env:
      GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      # pnpm action uses the packageManager field in package.json to
      # understand which version to install.
      - uses: pnpm/action-setup@v2
        with:
          version: 8.14.0
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: './pnpm-plugine2e-datasource/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Check types
        run: pnpm run typecheck
      - name: Lint
        run: pnpm run lint
      - name: Unit tests
        run: pnpm run test:ci
      - name: Build frontend
        run: pnpm run build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go environment
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage
          workdir: ./pnpm-plugine2e-datasource

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: buildAll
          workdir: ./pnpm-plugine2e-datasource

      - name: Check for E2E
        id: check-for-e2e
        run: |
          if [ -f "playwright.config.ts"]
          then
            echo "has-e2e=true" >> $GITHUB_OUTPUT
          fi

      - name: Install Playwright Browsers
        if: steps.check-for-e2e.outputs.has-e2e == 'true'
        run: pnpm exec playwright install --with-deps

      - name: Start grafana docker
        if: steps.check-for-e2e.outputs.has-e2e == 'true'
        run: docker-compose up -d

      - name: Wait for Grafana to start
        if: steps.check-for-e2e.outputs.has-e2e == 'true'
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:3000/'
          responseCode: 200
          timeout: 60000
          interval: 500

      - name: Run e2e tests
        if: steps.check-for-e2e.outputs.has-e2e == 'true'
        run: pnpm run e2e

      - name: Stop grafana docker
        if: steps.check-for-e2e.outputs.has-e2e == 'true'
        run: docker-compose down

      - name: Archive E2E output
        uses: actions/upload-artifact@v4
        if: steps.check-for-e2e.outputs.has-e2e == 'true' && steps.run-e2e-tests.outcome != 'success'
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 5

      - name: Sign plugin
        run: pnpm run sign
        if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN != '' }}

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r

      - name: Archive Build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.metadata.outputs.plugin-id }}-${{ steps.metadata.outputs.plugin-version }}
          path: ${{ steps.metadata.outputs.plugin-id }}
          retention-days: 5
